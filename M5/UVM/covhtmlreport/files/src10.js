var g_data = {"name":"classes/coverage.sv","src":"/***************************************************************\r\n*  Coverage class for a UVM Based FIFO Verification\r\n* \r\n*\r\n*  Author: Alexander Maso\r\n***************************************************************/\r\n\r\nclass fifo_coverage extends uvm_subscriber #(fifo_transaction);\r\n    `uvm_component_utils(fifo_coverage) // Register the component with the factory\r\n\r\n    // Declare the handle for our transactions\r\n    fifo_transaction tx;\r\n\r\n    // real is a double precision floating-point variable\r\n    // For coverage numbers/printing (.get_coverage() returns a value of type real)\r\n\r\n    real cov_cg_fifo;\r\n    real cov_cg_fifo_depth;\r\n    real cov_cg_data_range;\r\n    real cov_cg_data_patterns;\r\n    real cov_cg_abrupt_change;\r\n\r\n\r\n    // Define covergroups\r\n    // Covergroup for basic FIFO signals\r\n    covergroup cg_fifo;\r\n	option.per_instance = 1;\r\n	coverpoint tx.clk_wr {\r\n	    bins clock_write_high = {1};\r\n	    bins clock_write_low = {0};\r\n	}\r\n	coverpoint tx.clk_rd {\r\n	    bins clock_read_high = {1};\r\n	    bins clock_read_low = {0};\r\n	}\r\n        coverpoint tx.wr_en {\r\n            bins wr_en_high = {1};\r\n            bins wr_en_low = {0};\r\n        }\r\n        coverpoint tx.rd_en {\r\n            bins rd_en_high = {1};\r\n            bins rd_en_low = {0};\r\n        }\r\n        coverpoint tx.full {\r\n            bins full_true = {1};\r\n            bins full_false = {0};\r\n        }\r\n        coverpoint tx.empty {\r\n            bins empty_true = {1};\r\n            bins empty_false = {0};\r\n        }\r\n        coverpoint tx.half {\r\n            bins half_full_true = {1};\r\n            bins half_full_false = {0};\r\n        }\r\n	coverpoint tx.rst_n {\r\n	    bins rst_n_high = {1};\r\n	    bins rst_n_low = {0};\r\n	}\r\n    endgroup\r\n\r\n    // Covergroup for depth levels of  FIFO\r\n/*\r\n    covergroup cg_fifo_depth;\r\n	option.per_instance = 1;\r\n        coverpoint tx.wptr {\r\n            bins low = {[0:15]};            // Low depth\r\n            bins mid = {[16:31]};           // Mid depth\r\n            bins high = {[32:47]};          // High depth\r\n            bins max = {[48:63]};           // Max depth\r\n        }\r\n        coverpoint tx.rptr {\r\n            bins low = {[0:15]};            // Low depth\r\n            bins mid = {[16:31]};           // Mid depth\r\n            bins high = {[32:47]};          // High depth\r\n            bins max = {[48:63]};           // Max depth \r\n        }\r\n    endgroup\r\n*/\r\n\r\n    // Covergroup for data integrity\r\n    covergroup cg_data_range;\r\n	option.per_instance = 1;\r\n        coverpoint tx.data_out {\r\n            bins data_low = {[0:63]};\r\n            bins data_mid = {[64:127]};\r\n            bins data_high = {[128:191]};\r\n            bins data_max = {[192:255]};\r\n        }\r\n    endgroup\r\n\r\n    // Covergroup for specific data patterns\r\n    covergroup cg_data_patterns;\r\n	option.per_instance = 1;\r\n        coverpoint tx.data_in {\r\n            bins pattern_zero = {8'h00};\r\n            bins pattern_all_ones = {8'hFF};\r\n            bins pattern_alt_ones = {8'h55, 8'hAA};\r\n        }\r\n        coverpoint tx.data_out {\r\n            bins pattern_zero = {8'h00};\r\n            bins pattern_all_ones = {8'hFF};\r\n            bins pattern_alt_ones = {8'h55, 8'hAA};\r\n        }\r\n    endgroup\r\n\r\n\r\n    // Covergroup for capturing abrupt changes in r/w rates\r\n    covergroup cg_abrupt_change;\r\n	coverpoint tx.clk_wr {\r\n            bins clk_wr_high_to_low = (1 => 0);\r\n            bins clk_wr_low_to_high = (0 => 1);\r\n        }\r\n        coverpoint tx.clk_rd {\r\n            bins clk_rd_high_to_low = (1 => 0);\r\n            bins clk_rd_low_to_high = (0 => 1);\r\n        }\r\n        coverpoint tx.wr_en {\r\n            bins wr_en_high_to_low = (1 => 0);\r\n            bins wr_en_low_to_high = (0 => 1);\r\n        }\r\n        coverpoint tx.rd_en {\r\n            bins rd_en_high_to_low = (1 => 0);\r\n            bins rd_en_low_to_high = (0 => 1);\r\n        }\r\n	coverpoint tx.full {\r\n            bins full_high_to_low = (1 => 0);\r\n            bins full_low_to_high = (0 => 1);\r\n        }\r\n	coverpoint tx.half {\r\n            bins half_high_to_low = (1 => 0);\r\n            bins half_low_to_high = (0 => 1);\r\n        }\r\n	coverpoint tx.empty {\r\n            bins empty_high_to_low = (1 => 0);\r\n            bins empty_low_to_high = (0 => 1);\r\n        }\r\n    endgroup\r\n\r\n\r\n    // Constructor\r\n    function new(string name = \"fifo_coverage\", uvm_component parent = null);\r\n        super.new(name, parent);\r\n        `uvm_info(get_type_name(), $sformatf(\"Constructing %s\", get_full_name()), UVM_DEBUG);\r\n    \r\n        tx = fifo_transaction::type_id::create(\"tx\");\r\n	cg_fifo = new();\r\n	//cg_fifo_depth = new();\r\n	cg_data_range = new();\r\n	cg_data_patterns = new();\r\n	cg_abrupt_change = new();\r\n    endfunction : new\r\n\r\n    virtual function void write(fifo_transaction t);\r\n        `uvm_info(get_type_name(), $sformatf(\"Writing to %s\", get_full_name()), UVM_DEBUG);\r\n        tx = t;\r\n        t.print();\r\n\r\n	cg_fifo.sample();\r\n	//cg_fifo_depth.sample();\r\n	cg_data_range.sample();\r\n	cg_data_patterns.sample();\r\n	cg_abrupt_change.sample();\r\n\r\n\r\n	cov_cg_fifo = cg_fifo.get_coverage();\r\n    	//cov_cg_fifo_depth = cg_fifo_depth.get_coverage();\r\n    	cov_cg_data_range = cg_data_range.get_coverage();\r\n    	cov_cg_data_patterns = cg_data_patterns.get_coverage();\r\n    	cov_cg_abrupt_change = cg_abrupt_change.get_coverage();\r\n\r\n/*\r\n        `uvm_info(get_type_name(), $sformatf(\"Coverage cg_fifo: %f\", cov_cg_fifo), UVM_NONE);\r\n	    //`uvm_info(get_type_name(), $sformatf(\"Coverage cg_fifo_depth: %f\", cov_cg_fifo_depth), UVM_NONE);\r\n	    `uvm_info(get_type_name(), $sformatf(\"Coverage cg_data_range: %f\", cov_cg_data_range), UVM_NONE);\r\n	    `uvm_info(get_type_name(), $sformatf(\"Coverage cg_data_patterns: %f\", cov_cg_data_patterns), UVM_NONE);\r\n	    `uvm_info(get_type_name(), $sformatf(\"Coverage cg_idle_cycles: %f\", cov_cg_idle_cycles), UVM_NONE);\r\n	    `uvm_info(get_type_name(), $sformatf(\"Coverage cg_abrupt_change: %f\", cov_cg_abrupt_change), UVM_NONE);\r\n*/\r\n\r\n    endfunction : write\r\n\r\nendclass\r\n\r\n","lang":"verilog"};
processSrcData(g_data);